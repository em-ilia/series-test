{"version":3,"sources":["index.js"],"names":["MainWindow","props","state","Stage","Diverges","Converges","incrementStage","bind","resetStage","setConverges","setDiverges","this","setState","test","NthTerm","inc","conv","div","PSeries","AlternatingSeries","Geometric","Telescoping","Integral","Ratio","Comparison","onClick","React","Component","class","limit","TexInline","Formula","Substage","incrementSubstage","console","log","SeriesBlock","Summand","TexBlock","Alt","setAlt","n","Provider","Node","formula","inline","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.37cf5f53.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport MathJax from '../node_modules/react-mathjax';\nimport './index.css';\n\nclass MainWindow extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {Stage: 0, Diverges: false, Converges: false};\n\n        this.incrementStage = this.incrementStage.bind(this);\n        this.resetStage = this.resetStage.bind(this);\n        this.setConverges = this.setConverges.bind(this);\n        this.setDiverges = this.setDiverges.bind(this);\n    }\n\n    incrementStage() {\n        this.setState({Stage: this.state.Stage + 1});\n    }\n\n    resetStage() {\n        this.setState({Stage: 0});\n    }\n\n    setConverges() {\n        this.setState({Converges: true});\n    }\n\n    setDiverges() {\n        this.setState({Diverges: true});\n    }\n\n    render() {\n        if(this.state.Diverges) return <Diverges/>;\n        if(this.state.Converges) return <Converges/>;\n        let test;\n        switch(this.state.Stage) {\n            case 0:\n                test = (<NthTerm inc={this.incrementStage} conv={this.setConverges} div={this.setDiverges}/>);\n                break;\n            case 1:\n                test = (<PSeries inc={this.incrementStage} conv={this.setConverges} div={this.setDiverges}/>);\n                break;\n            case 2:\n                test = (<AlternatingSeries inc={this.incrementStage} conv={this.setConverges} div={this.setDiverges}/>);\n                break;\n            case 3:\n                test = (<Geometric inc={this.incrementStage} conv={this.setConverges} div={this.setDiverges}/>);\n                break;\n            case 4:\n                test = (<Telescoping inc={this.incrementStage} conv={this.setConverges} div={this.setDiverges}/>);\n                break;\n            case 5:\n                test = (<Integral inc={this.incrementStage} conv={this.setConverges} div={this.setDiverges}/>);\n                break;\n            case 6:\n                test = (<Ratio inc={this.incrementStage} conv={this.setConverges} div={this.setDiverges}/>);\n                break;\n            case 7:\n                test = (<Comparison inc={this.incrementStage} conv={this.setConverges} div={this.setDiverges}/>);\n                break;\n        }\n        return (\n            <div>\n                <button onClick={this.resetStage}>Reset</button>\n                {test}\n            </div>\n        );\n    }\n}\n\nclass Diverges extends React.Component {\n    render() {\n        return (\n            <div class=\"center\">\n                <h1>Your series diverges.</h1>\n                <p>I'm so sorry, I know this was sudden.</p>\n            </div>\n        )\n    }\n}\n\nclass Converges extends React.Component {\n    render() {\n        return (\n            <div class=\"center\">\n                <h1>Your series converges.</h1>\n                <p>Congratulations… I guess.</p>\n            </div>\n        )\n    }\n}\n\nclass NthTerm extends React.Component {\n    render() {\n        //let limit = \"$$\\\\lim_{n \\\\to \\\\infty} a_{n} = 0$$\";\n        let limit = <TexInline Formula=\"\\lim_{n \\to \\infty} a_{n} = 0\" />;\n        return (\n            <div class=\"center\">\n                <h1><u>Nth Term Test</u></h1><br/>\n                <p>Does {limit} ?</p><br/>\n                <button onClick={this.props.inc}>Yes</button>\n                <button onClick={this.props.div}>No</button>\n            </div>\n        );\n    }\n}\n\nclass PSeries extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {Substage: 0};\n\n        this.incrementSubstage = this.incrementSubstage.bind(this);\n    }\n\n    incrementSubstage() {\n        console.log(\"test\")\n        this.setState({Substage: this.state.Substage + 1});\n    }\n\n    render() {\n        switch(this.state.Substage) {\n            case 0: \n                return (\n                    <div class=\"center\">\n                        <h1><u>P-Series Test</u></h1><br/>\n                        <p>Does your sum look <i>sum</i>thing like this?</p>\n                        <SeriesBlock Summand=\"\\frac{1}{n^{p}}\"/>\n                        <br/><button onClick={this.incrementSubstage}>Yes</button>\n                        <button onClick={this.props.inc}>No</button>\n                    </div>\n                )\n            case 1:\n                return (\n                    <div class=\"center\">\n                        <h1><u>P-Series Test</u></h1><br/>\n                        <p>Is   <TexInline Formula=\"p > 1\"/> ?</p>\n                        <br/><button onClick={this.props.conv}>Yes</button>\n                        <button onClick={this.props.div}>No</button>\n                    </div>\n                )\n        }\n    }\n}\n\nclass AlternatingSeries extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {Substage: 0};\n\n        this.incrementSubstage = this.incrementSubstage.bind(this);\n    }\n\n    incrementSubstage() {\n        console.log(\"test\")\n        this.setState({Substage: this.state.Substage + 1});\n    }\n\n    render() {\n        switch(this.state.Substage) {\n            case 0:\n                return (\n                    <div class=\"center\">\n                        <h1><u>Alternating Series Test</u></h1><br/>\n                        <p>Does your sum look something like this?</p>\n                        <TexBlock Formula=\"\\sum_{n=1}^{\\infty} \\frac{(-1)^{n}}{a_{n}}\"/>\n                        <p>or</p>\n                        <TexBlock Formula=\"\\sum_{n=1}^{\\infty} \\frac{cos(\\pi n)}{a_{n}}\"/>\n                        <br/><button onClick={this.incrementSubstage}>Yes</button>\n                        <button onClick={this.props.inc}>No</button>\n                    </div>\n                )\n            case 1:\n                return (\n                    <div class=\"center\">\n                        <h1><u>Alternating Series Test</u></h1><br/>\n                        <p>Does your series meet the folliwng conditions?</p>\n                        <ul>\n                            <li>Subsequent terms in the series are decreasing in magnitude</li>\n                            <li>The series approaches 0</li>\n                            <li>Terms alternate</li>\n                        </ul>\n                        <br/><button onClick={this.props.conv}>Yes</button>\n                        <button onClick={this.props.inc}>No</button>\n                    </div>\n                )\n        }\n    }\n}\n\nclass Geometric extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {Substage: 0};\n\n        this.incrementSubstage = this.incrementSubstage.bind(this);\n    }\n\n    incrementSubstage() {\n        console.log(\"test\")\n        this.setState({Substage: this.state.Substage + 1});\n    }\n\n    render() {\n        switch(this.state.Substage) {\n            case 0:\n                return (\n                    <div class=\"center\">\n                        <h1><u>Geometric Series Test</u></h1><br/>\n                        <p>Does your sum look something like this?</p>\n                        <SeriesBlock Summand=\"ar^{n}\"/>\n                        <br/><button onClick={this.incrementSubstage}>Yes</button>\n                        <button onClick={this.props.inc}>No</button>\n                    </div>\n                )\n            case 1:\n                return (\n                    <div class=\"center\">\n                        <h1><u>Geometric Series Test</u></h1><br/>\n                        <p>Is <TexInline Formula=\"r < 1\"/> ?</p>\n                        <br/><button onClick={this.props.conv}>Yes</button>\n                        <button onClick={this.props.div}>No</button>\n                    </div>\n                )\n        }\n    }\n}\n\nclass Telescoping extends React.Component {\n    render() {\n        return (\n            <div class=\"center\">\n                <h1><u>Telescoping Series Test</u></h1><br/>\n                <p>Does your sum look something like this?</p>\n                <SeriesBlock Summand=\"\\frac{a}{(n+b)(n+c)}\"/>\n                <p>Or, if you write out the terms, do they begin to cancel?</p>\n                <br/><button onClick={this.props.conv}>Yes</button>\n                <button onClick={this.props.inc}>No</button>\n            </div>\n        )\n    }\n}\n\nclass Integral extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {Substage: 0};\n\n        this.incrementSubstage = this.incrementSubstage.bind(this);\n    }\n\n    incrementSubstage() {\n        console.log(\"test\")\n        this.setState({Substage: this.state.Substage + 1});\n    }\n\n    render() {\n        switch(this.state.Substage) {\n            case 0:\n                return (\n                    <div class=\"center\">\n                        <h1><u>Integral Test</u></h1><br/>\n                        <p><TexInline Formula=\"Let f(n)\" /> such that <TexInline Formula=\"f(n)=a_{n}\"/></p>\n                        <p>Is <TexInline Formula=\"f(n)\"/> continuous, decreasing, and positive on the same interval as your sum?</p>\n                        <br/><button onClick={this.incrementSubstage}>Yes</button>\n                        <button onClick={this.props.inc}>No</button>\n                    </div>\n                );\n            case 1:\n                return (\n                    <div class=\"center\">\n                        <h1><u>Integral Test</u></h1><br/>\n                        <p>Could you actually evaluate this integral?</p>\n                        <TexBlock Formula=\"\\int_{a}^{\\infty} f(n)dn\"/>\n                        <br/><button onClick={this.incrementSubstage}>Yes</button>\n                        <button onClick={this.props.inc}>No</button>\n                    </div>\n                );\n            case 2:\n                return (\n                    <div class=\"center\">\n                        <h1><u>Integral Test</u></h1><br/>\n                        <p>Ok, so do that. Did the integral converge?</p>\n                        <br/><button onClick={this.props.conv}>Yes</button>\n                        <button onClick={this.props.div}>No</button>\n                    </div>\n                )\n        }\n    }\n}\n\nclass Ratio extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {Substage: 0, Alt: false};\n\n        this.incrementSubstage = this.incrementSubstage.bind(this);\n        this.setAlt = this.setAlt.bind(this);\n    }\n\n    incrementSubstage() {\n        console.log(\"test\")\n        this.setState({Substage: this.state.Substage + 1});\n    }\n\n    setAlt() {\n        console.log(\"alt\");\n        this.setState({Alt: true});\n    }\n\n    render() {\n        if(this.state.Alt) return (\n            <div class=\"center\">\n                <h1>Ratio Test</h1>\n                <p>I suppose I can't make you evaluate that, but what does this accomplish? I mean, I've put a lot of time into this assignment and you're just going to press\n                    a button that says \"no\" just for the sake of it? You know you have to restart from the beginning now, right? You know that because of this, I have to <i>make</i>\n                    that reset button, right? You're just making more work for me. Why would you do that? And now that I've typed out this block of text, I've lost even more time.\n                    Because of you. Thanks.\n                </p>\n            </div>\n        )\n        switch(this.state.Substage) {\n            case 0:\n                return (\n                    <div class=\"center\">\n                        <h1><u>Ratio Test</u></h1><br/>\n                        <p>Does your series look like a geometric series, but isn't actually a geometric series?</p>\n                        <p>or</p>\n                        <p>Does your series contain factorials or exponentials?</p>\n                        <br/><button onClick={this.incrementSubstage}>Yes</button>\n                        <button onClick={this.props.inc}>No</button>\n                    </div>\n                )\n            case 1:\n                return (\n                    <div class=\"center\">\n                        <h1><u>Ratio Test</u></h1><br/>\n                        <p>Would you be so kind as to evaluate the following limit and state the result?</p>\n                        <TexBlock Formula=\"\\lim_{n\\to\\infty} \\Big|\\frac{a_{n+1}}{a_{n}}\\Big| = L\"/>\n                        <br/><button onClick={this.props.conv}>{\"L < 1\"}</button>\n                        <button onClick={this.props.div}>{\"L > 1\"}</button>\n                        <button onClick={this.props.inc}>{\"L = 1\"}</button>\n                        <button onClick={this.setAlt}>No</button>\n                    </div>\n                )\n        }\n    }\n}\n\nclass Comparison extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {Substage: 0};\n\n        this.incrementSubstage = this.incrementSubstage.bind(this);\n    }\n\n    incrementSubstage(n) {\n        console.log(\"test\")\n        this.setState({Substage: this.state.Substage + n});\n    }\n\n    render() {\n        switch(this.state.Substage) {\n            case 0:\n                return (\n                    <div class=\"center\">\n                        <h1><u>Comparison</u></h1><br/>\n                        <p>All that's left to do is try comparison.</p>\n                        <p>Would you like to try limit comparison or direct comparison?</p>\n                        <button onClick={() => this.incrementSubstage(1)}>Limit comparison</button>\n                        <button onClick={() => this.incrementSubstage(2)}>Direct comparison</button>\n                        <button onClick={() => this.incrementSubstage(3)}>No</button>\n                    </div>\n                )\n            case 1:\n                return (\n                    <div class=\"center\">\n                        <h1><u>Limit Comparison</u></h1><br/>\n                        <p>Try to think of another series <TexInline Formula=\"b_{n}\"/> such that</p>\n                        <TexBlock Formula=\"\\lim_{n\\to\\infty} \\Big|\\frac{a_{n}}{b_{n}}\\Big| \\in\\mathbb{R}^{+}\"/>\n                        <p>or</p>\n                        <TexBlock Formula=\"\\lim_{n\\to\\infty} \\Big|\\frac{b_{n}}{a_{n}}\\Big| \\in\\mathbb{R}^{+}\"/>\n                        <p>Did the series you compared to diverge or converge?</p>\n                        <button onClick={this.props.conv}>Converge</button>\n                        <button onClick={this.props.div}>Diverge</button>\n                        <button onClick={() => this.incrementSubstage(2)}>No</button>\n                    </div>\n                )\n            case 2:\n                return (\n                    <div class=\"center\">\n                        <h1><u>Direct Comparison</u></h1><br/>\n                        <p>Try to think of another series <TexInline Formula=\"b_{n}\"/> such that</p>\n                        <p><TexInline Formula=\"\\sum_{n=1}^{\\infty}b_{n}\\in\\mathbb{R}\"/> and <TexInline Formula=\"0\\leq a_{n}\\leq b_{n}\"/></p>\n                        <p>or</p>\n                        <p><TexInline Formula=\"\\sum_{n=1}^{\\infty}b_{n}\\notin\\mathbb{R}\"/> and <TexInline Formula=\"0\\leq b_{n}\\leq a_{n}\"/></p>\n                        <p>Did the series you compared to diverge or converge?</p>\n                        <button onClick={this.props.conv}>Converge</button>\n                        <button onClick={this.props.div}>Diverge</button>\n                        <button onClick={() => this.incrementSubstage(1)}>No</button>\n                    </div>\n                )\n            case 3:\n                return (\n                    <div class=\"center\">\n                        <h1><u>seriously</u></h1><br/>\n                        <p>you got this far and you're just going to say no?</p>\n                    </div>\n                )\n        }\n    }\n}\n\nclass SeriesBlock extends React.Component {\n    render() {\n        return (\n            <TexBlock Formula={\"\\\\sum_{n=1}^{\\\\infty}\" + this.props.Summand} />\n        );\n    }\n}\n\nclass TexBlock extends React.Component {\n    render() {\n        return (\n            <MathJax.Provider>\n                    <MathJax.Node formula={this.props.Formula} />\n            </MathJax.Provider>\n        )\n    }\n}\n\nclass TexInline extends React.Component {\n    render() {\n        return (\n            <MathJax.Provider>\n                    <MathJax.Node inline formula={this.props.Formula} />\n            </MathJax.Provider>\n        )\n    }\n}\n\nReactDOM.render(<MainWindow/>, document.getElementById('root'));\n//ReactDOM.render(<SeriesBlock Summand=\"\\frac{1}{n^{p}}\"/>, document.getElementById('root'))\n"],"sourceRoot":""}